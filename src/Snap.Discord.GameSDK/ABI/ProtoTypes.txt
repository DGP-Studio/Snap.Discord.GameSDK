// AchievementEvents
void UserAchievementUpdateHandler(nint ptr, ref UserAchievement userAchievement)

// AchievementMethods
void SetUserAchievementHandler(Result result)
void SetUserAchievementCallback(SetUserAchievementHandler ptr, Result result)
void SetUserAchievementMethod(AchievementMethods* methodsPtr, long achievementId, byte percentComplete, SetUserAchievementHandler callbackData, SetUserAchievementCallback callback)
void FetchUserAchievementsHandler(Result result)
void FetchUserAchievementsCallback(FetchUserAchievementsHandler ptr, Result result)
void FetchUserAchievementsMethod(AchievementMethods* methodsPtr, FetchUserAchievementsHandler callbackData, FetchUserAchievementsCallback callback)
void CountUserAchievementsMethod(AchievementMethods* methodsPtr, ref int count)
Result GetUserAchievementMethod(AchievementMethods* methodsPtr, long userAchievementId, ref UserAchievement userAchievement)
Result GetUserAchievementAtMethod(AchievementMethods* methodsPtr, Int32 index, ref UserAchievement userAchievement)

// ActivityEvents
void ActivityJoinHandler(nint ptr, [MarshalAs(UnmanagedType.LPStr)] string secret)
void ActivitySpectateHandler(nint ptr, [MarshalAs(UnmanagedType.LPStr)] string secret)
void ActivityJoinRequestHandler(nint ptr, ref User user)
void ActivityInviteHandler(nint ptr, ActivityActionType type, ref User user, ref Activity activity)

// ActivityMethods
Result RegisterCommandMethod(ActivityMethods* methodsPtr, [MarshalAs(UnmanagedType.LPStr)] string command)
Result RegisterSteamMethod(ActivityMethods* methodsPtr, uint steamId)
void UpdateActivityHandler(Result result)
void UpdateActivityCallback(UpdateActivityHandler ptr, Result result)
void UpdateActivityMethod(ActivityMethods* methodsPtr, ref Activity activity, UpdateActivityHandler callbackData, UpdateActivityCallback callback)
void ClearActivityHandler(Result result)
void ClearActivityCallback(ClearActivityHandler ptr, Result result)
void ClearActivityMethod(ActivityMethods* methodsPtr, ClearActivityHandler callbackData, ClearActivityCallback callback)
void SendRequestReplyHandler(Result result)
void SendRequestReplyCallback(SendRequestReplyHandler ptr, Result result)
void SendRequestReplyMethod(ActivityMethods* methodsPtr, long userId, ActivityJoinRequestReply reply, SendRequestReplyHandler callbackData, SendRequestReplyCallback callback)
void SendInviteHandler(Result result)
void SendInviteCallback(SendInviteHandler ptr, Result result)
void SendInviteMethod(ActivityMethods* methodsPtr, long userId, ActivityActionType type, [MarshalAs(UnmanagedType.LPStr)] string content, SendInviteHandler callbackData, SendInviteCallback callback)
void AcceptInviteHandler(Result result)
void AcceptInviteCallback(AcceptInviteHandler ptr, Result result)
void AcceptInviteMethod(ActivityMethods* methodsPtr, long userId, AcceptInviteHandler callbackData, AcceptInviteCallback callback)

// ApplicationMethods
void ValidateOrExitHandler(Result result)
void ValidateOrExitCallback(ValidateOrExitHandler ptr, Result result)
void ValidateOrExitMethod(ApplicationMethods* methodsPtr, ValidateOrExitHandler callbackData, ValidateOrExitCallback callback)
void GetCurrentLocaleMethod(ApplicationMethods* methodsPtr, StringBuilder locale)
void GetCurrentBranchMethod(ApplicationMethods* methodsPtr, StringBuilder branch)
void GetOAuth2TokenHandler(Result result, ref OAuth2Token oauth2Token)
void GetOAuth2TokenCallback(GetOAuth2TokenHandler ptr, Result result, ref OAuth2Token oauth2Token)
void GetOAuth2TokenMethod(ApplicationMethods* methodsPtr, GetOAuth2TokenHandler callbackData, GetOAuth2TokenCallback callback)
void GetTicketHandler(Result result, ref string data)
void GetTicketCallback(GetTicketHandler ptr, Result result, [MarshalAs(UnmanagedType.LPStr)] ref string data)
void GetTicketMethod(ApplicationMethods* methodsPtr, GetTicketHandler callbackData, GetTicketCallback callback)

// ImageMethods
void FetchHandler(Result result, ImageHandle handleResult)
void FetchCallback(FetchHandler ptr, Result result, ImageHandle handleResult)
void FetchMethod(ImageMethods* methodsPtr, ImageHandle handle, bool refresh, FetchHandler callbackData, FetchCallback callback)
Result GetDimensionsMethod(ImageMethods* methodsPtr, ImageHandle handle, ref ImageDimensions dimensions)
Result GetDataMethod(ImageMethods* methodsPtr, ImageHandle handle, byte[] data, Int32 dataLen)

// LobbyEvents
void LobbyUpdateHandler(nint ptr, long lobbyId)
void LobbyDeleteHandler(nint ptr, long lobbyId, uint reason)
void MemberConnectHandler(nint ptr, long lobbyId, long userId)
void MemberUpdateHandler(nint ptr, long lobbyId, long userId)
void MemberDisconnectHandler(nint ptr, long lobbyId, long userId)
void LobbyMessageHandler(nint ptr, long lobbyId, long userId, nint dataPtr, int dataLen)
void SpeakingHandler(nint ptr, long lobbyId, long userId, bool speaking)
void NetworkMessageHandler(nint ptr, long lobbyId, long userId, byte channelId, nint dataPtr, int dataLen)

// LobbyMemberTransactionMethods
Result LobbyMemberTransactionMethods_SetMetadataMethod(LobbyMemberTransactionMethods* methodsPtr, [MarshalAs(UnmanagedType.LPStr)] string key, [MarshalAs(UnmanagedType.LPStr)] string value)
Result LobbyMemberTransactionMethods_DeleteMetadataMethod(LobbyMemberTransactionMethods* methodsPtr, [MarshalAs(UnmanagedType.LPStr)] string key)

// LobbyMethods
Result GetLobbyCreateTransactionMethod(LobbyMethods* methodsPtr, LobbyTransactionMethods** transaction)
Result GetLobbyUpdateTransactionMethod(LobbyMethods* methodsPtr, long lobbyId, LobbyTransactionMethods** transaction)
Result GetMemberUpdateTransactionMethod(LobbyMethods* methodsPtr, long lobbyId, long userId, LobbyMemberTransactionMethods** transaction)
void CreateLobbyHandler(Result result, ref Lobby lobby)
void CreateLobbyCallback(CreateLobbyHandler ptr, Result result, ref Lobby lobby)
void CreateLobbyMethod(LobbyMethods* methodsPtr, LobbyTransactionMethods* transaction, CreateLobbyHandler callbackData, CreateLobbyCallback callback)
void UpdateLobbyHandler(Result result)
void UpdateLobbyCallback(UpdateLobbyHandler ptr, Result result)
void UpdateLobbyMethod(LobbyMethods* methodsPtr, long lobbyId, LobbyTransactionMethods* transaction, UpdateLobbyHandler callbackData, UpdateLobbyCallback callback)
void DeleteLobbyHandler(Result result)
void DeleteLobbyCallback(DeleteLobbyHandler ptr, Result result)
void DeleteLobbyMethod(LobbyMethods* methodsPtr, long lobbyId, DeleteLobbyHandler callbackData, DeleteLobbyCallback callback)
void ConnectLobbyHandler(Result result, ref Lobby lobby)
void ConnectLobbyCallback(ConnectLobbyHandler ptr, Result result, ref Lobby lobby)
void ConnectLobbyMethod(LobbyMethods* methodsPtr, long lobbyId, [MarshalAs(UnmanagedType.LPStr)] string secret, ConnectLobbyHandler callbackData, ConnectLobbyCallback callback)
void ConnectLobbyWithActivitySecretHandler(Result result, ref Lobby lobby)
void ConnectLobbyWithActivitySecretCallback(ConnectLobbyWithActivitySecretHandler ptr, Result result, ref Lobby lobby)
void ConnectLobbyWithActivitySecretMethod(LobbyMethods* methodsPtr, [MarshalAs(UnmanagedType.LPStr)] string activitySecret, ConnectLobbyWithActivitySecretHandler callbackData, ConnectLobbyWithActivitySecretCallback callback)
void DisconnectLobbyHandler(Result result)
void DisconnectLobbyCallback(DisconnectLobbyHandler ptr, Result result)
void DisconnectLobbyMethod(LobbyMethods* methodsPtr, long lobbyId, DisconnectLobbyHandler callbackData, DisconnectLobbyCallback callback)
Result GetLobbyMethod(LobbyMethods* methodsPtr, long lobbyId, ref Lobby lobby)
Result GetLobbyActivitySecretMethod(LobbyMethods* methodsPtr, long lobbyId, StringBuilder secret)
Result GetLobbyMetadataValueMethod(LobbyMethods* methodsPtr, long lobbyId, [MarshalAs(UnmanagedType.LPStr)] string key, StringBuilder value)
Result GetLobbyMetadataKeyMethod(LobbyMethods* methodsPtr, long lobbyId, Int32 index, StringBuilder key)
Result LobbyMetadataCountMethod(LobbyMethods* methodsPtr, long lobbyId, ref Int32 count)
Result MemberCountMethod(LobbyMethods* methodsPtr, long lobbyId, ref Int32 count)
Result GetMemberUserIdMethod(LobbyMethods* methodsPtr, long lobbyId, Int32 index, ref long userId)
Result GetMemberUserMethod(LobbyMethods* methodsPtr, long lobbyId, long userId, ref User user)
Result GetMemberMetadataValueMethod(LobbyMethods* methodsPtr, long lobbyId, long userId, [MarshalAs(UnmanagedType.LPStr)] string key, StringBuilder value)
Result GetMemberMetadataKeyMethod(LobbyMethods* methodsPtr, long lobbyId, long userId, Int32 index, StringBuilder key)
Result MemberMetadataCountMethod(LobbyMethods* methodsPtr, long lobbyId, long userId, ref Int32 count)
void UpdateMemberHandler(Result result)
void UpdateMemberCallback(UpdateMemberHandler ptr, Result result)
void UpdateMemberMethod(LobbyMethods* methodsPtr, long lobbyId, long userId, LobbyMemberTransactionMethods* transaction, UpdateMemberHandler callbackData, UpdateMemberCallback callback)
void SendLobbyMessageHandler(Result result)
void SendLobbyMessageCallback(SendLobbyMessageHandler ptr, Result result)
void SendLobbyMessageMethod(LobbyMethods* methodsPtr, long lobbyId, byte[] data, Int32 dataLen, SendLobbyMessageHandler callbackData, SendLobbyMessageCallback callback)
Result GetSearchQueryMethod(LobbyMethods* methodsPtr, LobbySearchQueryMethods** query)
void SearchHandler(Result result)
void SearchCallback(SearchHandler ptr, Result result)
void SearchMethod(LobbyMethods* methodsPtr, LobbySearchQueryMethods* query, SearchHandler callbackData, SearchCallback callback)
void LobbyCountMethod(LobbyMethods* methodsPtr, ref Int32 count)
Result GetLobbyIdMethod(LobbyMethods* methodsPtr, Int32 index, ref long lobbyId)
void ConnectVoiceHandler(Result result)
void ConnectVoiceCallback(ConnectVoiceHandler ptr, Result result)
void ConnectVoiceMethod(LobbyMethods* methodsPtr, long lobbyId, ConnectVoiceHandler callbackData, ConnectVoiceCallback callback)
void DisconnectVoiceHandler(Result result)
void DisconnectVoiceCallback(DisconnectVoiceHandler ptr, Result result)
void DisconnectVoiceMethod(LobbyMethods* methodsPtr, long lobbyId, DisconnectVoiceHandler callbackData, DisconnectVoiceCallback callback)
Result ConnectNetworkMethod(LobbyMethods* methodsPtr, long lobbyId)
Result DisconnectNetworkMethod(LobbyMethods* methodsPtr, long lobbyId)
Result FlushNetworkMethod(LobbyMethods* methodsPtr)
Result OpenNetworkChannelMethod(LobbyMethods* methodsPtr, long lobbyId, byte channelId, bool reliable)
Result SendNetworkMessageMethod(LobbyMethods* methodsPtr, long lobbyId, long userId, byte channelId, byte[] data, Int32 dataLen)

// LobbySearchQueryMethods
Result LobbySearchQueryMethods_FilterMethod(LobbySearchQueryMethods* methodsPtr, [MarshalAs(UnmanagedType.LPStr)] string key, LobbySearchComparison comparison, LobbySearchCast cast, [MarshalAs(UnmanagedType.LPStr)] string value)
Result SortMethod(LobbySearchQueryMethods* methodsPtr, [MarshalAs(UnmanagedType.LPStr)] string key, LobbySearchCast cast, [MarshalAs(UnmanagedType.LPStr)] string value)
Result LimitMethod(LobbySearchQueryMethods* methodsPtr, UInt32 limit)
Result DistanceMethod(LobbySearchQueryMethods* methodsPtr, LobbySearchDistance distance)

// LobbyTransactionMethods
Result SetTypeMethod(LobbyTransactionMethods* methodsPtr, LobbyType type)
Result SetOwnerMethod(LobbyTransactionMethods* methodsPtr, Int64 ownerId)
Result SetCapacityMethod(LobbyTransactionMethods* methodsPtr, UInt32 capacity)
Result SetMetadataMethod(LobbyTransactionMethods* methodsPtr, [MarshalAs(UnmanagedType.LPStr)] string key, [MarshalAs(UnmanagedType.LPStr)] string value)
Result DeleteMetadataMethod(LobbyTransactionMethods* methodsPtr, [MarshalAs(UnmanagedType.LPStr)] string key)
Result LobbyTransactionMethods_SetLockedMethod(LobbyTransactionMethods* methodsPtr, bool locked)

// NetworkEvents
void MessageHandler(IntPtr ptr, UInt64 peerId, byte channelId, IntPtr dataPtr, Int32 dataLen)
void RouteUpdateHandler(IntPtr ptr, [MarshalAs(UnmanagedType.LPStr)] string routeData)

// NetworkMethods
void GetPeerIdMethod(NetworkMethods* methodsPtr, ref UInt64 peerId)
Result FlushMethod(NetworkMethods* methodsPtr)
Result OpenPeerMethod(NetworkMethods* methodsPtr, UInt64 peerId, [MarshalAs(UnmanagedType.LPStr)] string routeData)
Result UpdatePeerMethod(NetworkMethods* methodsPtr, UInt64 peerId, [MarshalAs(UnmanagedType.LPStr)] string routeData)
Result ClosePeerMethod(NetworkMethods* methodsPtr, UInt64 peerId)
Result OpenChannelMethod(NetworkMethods* methodsPtr, UInt64 peerId, byte channelId, bool reliable)
Result CloseChannelMethod(NetworkMethods* methodsPtr, UInt64 peerId, byte channelId)
Result SendMessageMethod(NetworkMethods* methodsPtr, UInt64 peerId, byte channelId, byte[] data, Int32 dataLen)

// OverlayEvents
void ToggleHandler(IntPtr ptr, bool locked)

// OverlayMethods
void IsEnabledMethod(OverlayMethods* methodsPtr, ref bool enabled)
void IsLockedMethod(OverlayMethods* methodsPtr, ref bool locked)
void SetLockedHandler(Result result)
void SetLockedCallback(SetLockedHandler ptr, Result result)
void SetLockedMethod(OverlayMethods* methodsPtr, bool locked, SetLockedHandler callbackData, SetLockedCallback callback)
void OpenActivityInviteHandler(Result result)
void OpenActivityInviteCallback(OpenActivityInviteHandler ptr, Result result)
void OpenActivityInviteMethod(OverlayMethods* methodsPtr, ActivityActionType type, OpenActivityInviteHandler callbackData, OpenActivityInviteCallback callback)
void OpenGuildInviteHandler(Result result)
void OpenGuildInviteCallback(OpenGuildInviteHandler ptr, Result result)
void OpenGuildInviteMethod(OverlayMethods* methodsPtr, [MarshalAs(UnmanagedType.LPStr)] string code, OpenGuildInviteHandler callbackData, OpenGuildInviteCallback callback)
void OpenVoiceSettingsHandler(Result result)
void OpenVoiceSettingsCallback(OpenVoiceSettingsHandler ptr, Result result)
void OpenVoiceSettingsMethod(OverlayMethods* methodsPtr, OpenVoiceSettingsHandler callbackData, OpenVoiceSettingsCallback callback)
Result InitDrawingDxgiMethod(OverlayMethods* methodsPtr, IntPtr swapchain, bool useMessageForwarding)
void OnPresentMethod(OverlayMethods* methodsPtr)
void ForwardMessageMethod(OverlayMethods* methodsPtr, IntPtr message)
void KeyEventMethod(OverlayMethods* methodsPtr, bool down, [MarshalAs(UnmanagedType.LPStr)] string keyCode, KeyVariant variant)
void CharEventMethod(OverlayMethods* methodsPtr, [MarshalAs(UnmanagedType.LPStr)] string character)
void MouseButtonEventMethod(OverlayMethods* methodsPtr, byte down, Int32 clickCount, MouseButton which, Int32 x, Int32 y)
void MouseMotionEventMethod(OverlayMethods* methodsPtr, Int32 x, Int32 y)
void ImeCommitTextMethod(OverlayMethods* methodsPtr, [MarshalAs(UnmanagedType.LPStr)] string text)
void ImeSetCompositionMethod(OverlayMethods* methodsPtr, [MarshalAs(UnmanagedType.LPStr)] string text, ref ImeUnderline underlines, Int32 from, Int32 to)
void ImeCancelCompositionMethod(OverlayMethods* methodsPtr)
void SetImeCompositionRangeCallbackHandler(Int32 from, Int32 to, ref Rect bounds)
void SetImeCompositionRangeCallbackCallback(SetImeCompositionRangeCallbackHandler ptr, Int32 from, Int32 to, ref Rect bounds)
void SetImeCompositionRangeCallbackMethod(OverlayMethods* methodsPtr, SetImeCompositionRangeCallbackHandler callbackData, SetImeCompositionRangeCallbackCallback callback)
void SetImeSelectionBoundsCallbackHandler(Rect anchor, Rect focus, bool isAnchorFirst)
void SetImeSelectionBoundsCallbackCallback(SetImeSelectionBoundsCallbackHandler ptr, Rect anchor, Rect focus, bool isAnchorFirst)
void SetImeSelectionBoundsCallbackMethod(OverlayMethods* methodsPtr, SetImeSelectionBoundsCallbackHandler callbackData, SetImeSelectionBoundsCallbackCallback callback)
bool IsPointInsideClickZoneMethod(OverlayMethods* methodsPtr, Int32 x, Int32 y)

// RelationshipEvents
void RefreshHandler(IntPtr ptr)
void RelationshipUpdateHandler(IntPtr ptr, ref Relationship relationship)

// RelationshipMethods
bool FilterHandler(ref Relationship relationship)
bool FilterCallback(FilterHandler ptr, ref Relationship relationship)
void FilterMethod(RelationshipMethods* methodsPtr, FilterHandler callbackData, FilterCallback callback)
Result RelationshipMethods_CountMethod(RelationshipMethods* methodsPtr, ref Int32 count)
Result GetMethod(RelationshipMethods* methodsPtr, Int64 userId, ref Relationship relationship)
Result GetAtMethod(RelationshipMethods* methodsPtr, UInt32 index, ref Relationship relationship)

// StorageMethods
Result ReadMethod(StorageMethods* methodsPtr, [MarshalAs(UnmanagedType.LPStr)] string name, byte[] data, Int32 dataLen, ref UInt32 read)
void ReadAsyncHandler(Result result, Span<byte> data)
void ReadAsyncCallback(ReadAsyncHandler ptr, Result result, IntPtr dataPtr, Int32 dataLen)
void ReadAsyncMethod(StorageMethods* methodsPtr, [MarshalAs(UnmanagedType.LPStr)] string name, ReadAsyncHandler callbackData, ReadAsyncCallback callback)
void ReadAsyncPartialHandler(Result result, Span<byte> data)
void ReadAsyncPartialCallback(ReadAsyncPartialHandler ptr, Result result, IntPtr dataPtr, Int32 dataLen)
void ReadAsyncPartialMethod(StorageMethods* methodsPtr, [MarshalAs(UnmanagedType.LPStr)] string name, UInt64 offset, UInt64 length, ReadAsyncPartialHandler callbackData, ReadAsyncPartialCallback callback)
Result WriteMethod(StorageMethods* methodsPtr, [MarshalAs(UnmanagedType.LPStr)] string name, byte[] data, Int32 dataLen)
void WriteAsyncHandler(Result result)
void WriteAsyncCallback(WriteAsyncHandler ptr, Result result)
void WriteAsyncMethod(StorageMethods* methodsPtr, [MarshalAs(UnmanagedType.LPStr)] string name, byte[] data, Int32 dataLen, WriteAsyncHandler callbackData, WriteAsyncCallback callback)
Result DeleteMethod(StorageMethods* methodsPtr, [MarshalAs(UnmanagedType.LPStr)] string name)
Result ExistsMethod(StorageMethods* methodsPtr, [MarshalAs(UnmanagedType.LPStr)] string name, ref bool exists)
void CountMethod(StorageMethods* methodsPtr, ref Int32 count)
Result StatMethod(StorageMethods* methodsPtr, [MarshalAs(UnmanagedType.LPStr)] string name, ref FileStat stat)
Result StatAtMethod(StorageMethods* methodsPtr, Int32 index, ref FileStat stat)
Result GetPathMethod(StorageMethods* methodsPtr, StringBuilder path)

// StoreEvents
void EntitlementCreateHandler(IntPtr ptr, ref Entitlement entitlement)
void EntitlementDeleteHandler(IntPtr ptr, ref Entitlement entitlement)

// StoreMethods
void FetchSkusHandler(Result result)
void FetchSkusCallback(FetchSkusHandler ptr, Result result)
void FetchSkusMethod(StoreMethods* methodsPtr, FetchSkusHandler callbackData, FetchSkusCallback callback)
void CountSkusMethod(StoreMethods* methodsPtr, ref Int32 count)
Result GetSkuMethod(StoreMethods* methodsPtr, Int64 skuId, ref Sku sku)
Result GetSkuAtMethod(StoreMethods* methodsPtr, Int32 index, ref Sku sku)
void FetchEntitlementsHandler(Result result)
void FetchEntitlementsCallback(FetchEntitlementsHandler ptr, Result result)
void FetchEntitlementsMethod(StoreMethods* methodsPtr, FetchEntitlementsHandler callbackData, FetchEntitlementsCallback callback)
void CountEntitlementsMethod(StoreMethods* methodsPtr, ref Int32 count)
Result GetEntitlementMethod(StoreMethods* methodsPtr, Int64 entitlementId, ref Entitlement entitlement)
Result GetEntitlementAtMethod(StoreMethods* methodsPtr, Int32 index, ref Entitlement entitlement)
Result HasSkuEntitlementMethod(StoreMethods* methodsPtr, Int64 skuId, ref bool hasEntitlement)
void StartPurchaseHandler(Result result)
void StartPurchaseCallback(StartPurchaseHandler ptr, Result result)
void StartPurchaseMethod(StoreMethods* methodsPtr, Int64 skuId, StartPurchaseHandler callbackData, StartPurchaseCallback callback)

// UserEvents
void CurrentUserUpdateHandler(IntPtr ptr)

// UserMethods
Result GetCurrentUserMethod(UserMethods* methodsPtr, ref User currentUser)
void GetUserHandler(Result result, ref User user)
void GetUserCallback(GetUserHandler ptr, Result result, ref User user)
void GetUserMethod(UserMethods* methodsPtr, Int64 userId, GetUserHandler callbackData, GetUserCallback callback)
Result GetCurrentUserPremiumTypeMethod(UserMethods* methodsPtr, ref PremiumType premiumType)
Result CurrentUserHasFlagMethod(UserMethods* methodsPtr, UserFlag flag, ref bool hasFlag)

// VoiceEvents
void SettingsUpdateHandler(IntPtr ptr)

// VoiceMethods
Result GetInputModeMethod(VoiceMethods* methodsPtr, ref InputMode inputMode)
void SetInputModeHandler(Result result)
void SetInputModeCallback(SetInputModeHandler ptr, Result result)
void SetInputModeMethod(VoiceMethods* methodsPtr, InputMode inputMode, SetInputModeHandler callbackData, SetInputModeCallback callback)
Result IsSelfMuteMethod(VoiceMethods* methodsPtr, ref bool mute)
Result SetSelfMuteMethod(VoiceMethods* methodsPtr, bool mute)
Result IsSelfDeafMethod(VoiceMethods* methodsPtr, ref bool deaf)
Result SetSelfDeafMethod(VoiceMethods* methodsPtr, bool deaf)
Result IsLocalMuteMethod(VoiceMethods* methodsPtr, Int64 userId, ref bool mute)
Result SetLocalMuteMethod(VoiceMethods* methodsPtr, Int64 userId, bool mute)
Result GetLocalVolumeMethod(VoiceMethods* methodsPtr, Int64 userId, ref byte volume)
Result SetLocalVolumeMethod(VoiceMethods* methodsPtr, Int64 userId, byte volume)

// DiscordMethods
void DestroyHandler(DiscordMethods* MethodsPtr)
Result RunCallbacksMethod(DiscordMethods* methodsPtr)
void SetLogHookHandler(LogLevel level, string message)
void SetLogHookCallback(SetLogHookHandler ptr, LogLevel level, [MarshalAs(UnmanagedType.LPStr)] string message)
void SetLogHookMethod(DiscordMethods* methodsPtr, LogLevel minLevel, SetLogHookHandler callbackData, SetLogHookCallback callback)
ApplicationMethods* GetApplicationManagerMethod(DiscordMethods* discordPtr)
UserMethods* GetUserManagerMethod(DiscordMethods* discordPtr)
ImageMethods* GetImageManagerMethod(DiscordMethods* discordPtr)
ActivityMethods* GetActivityManagerMethod(DiscordMethods* discordPtr)
RelationshipMethods* GetRelationshipManagerMethod(DiscordMethods* discordPtr)
LobbyMethods* GetLobbyManagerMethod(DiscordMethods* discordPtr)
NetworkMethods* GetNetworkManagerMethod(DiscordMethods* discordPtr)
OverlayMethods* GetOverlayManagerMethod(DiscordMethods* discordPtr)
StorageMethods* GetStorageManagerMethod(DiscordMethods* discordPtr)
StoreMethods* GetStoreManagerMethod(DiscordMethods* discordPtr)
VoiceMethods* GetVoiceManagerMethod(DiscordMethods* discordPtr)
AchievementMethods* GetAchievementManagerMethod(DiscordMethods* discordPtr)